


#ifndef _PRU_SPI_HP_
#define _PRU_SPI_HP_
#endif

#define AM33XX

// ***************************************
// *          Global definitions         *
// ***************************************

// various utility locations
#define ITER		r0.w0		// general purpose, 16-bit counter for loops

#define SPEED_MHZ	r1.b1		// number of PRU cycles to wait per half SPI clock cycle
#define TRANS_TOTAL	r1.b2		// total bytes in transaction
#define READY_BIT	r1.t31		// is there a transaction in progress?

#define MISO_PIN	r31.t8		//P8_27, mode 6 (input)
#define MOSI_PIN	r30.t9		//P8_29, mode 5 (output)
#define CS_PINS		r30.b0		//P8_39 -> P8_46 (not in order), mode 5 (output) - 8 CS pins
#define CLOCK_PIN       r30.t10		//P8_28, mode 6 (output)

#define TRANS_BUF_START	r2		// starting register for transaction buffer

#define MODE_REG	r16.b0		// byte in which to store the SPI mode value
#define ID_REG		r16.b1		// byte in which to store the SPI device id (0-8, corresponds to CS pin)
#define BIT_ITER	r16.b2		// iterator used specifically to iterate backwards through bits (MSB transmission)
#define TRANS_COUNTER	r16.b3		// number of bytes transmitted/received so far

#define TEMP_BYTE	r17.b0		// temporary space for modifying
#define RX_BYTE		r17.b1		// current byte being received
#define TX_BYTE		r17.b2		// current byte being transmitted


#define CYCLES_TO_WAIT  r18.w2		// redundant, should be the same as SPEED_MHZ


#define RET_ADDR	r18.w0		// used to store return address
#define MEM_START	r19		// holds the memory address of the beginning of the PRU data memory

#define SCRATCH_1	11		// scratch pad 1
#define TRANS_MAX	56		// maximum bytes that can be moved in a single transaction (based on register allocations, may be subject to change)
#define PRU_CLOCK_MHZ	200		// might be useful

#define GP_STACK_PTR	0x4000		// general-purpose stack at top of memory
#define RX_STACK_PTR	0x00AC		// stack to invert received bytes as they are stored (due to byte ordering issues)

#define PRU0_MEMSTART	0x0000
#define PRU1_MEMSTART	0x2000

// TODO: create stack at top of PRU memory, can be used to invert MSB values

#define CONST_PRUSSINTC C0
#define CONST_PRUCFG    C4
#define CONST_PRUDRAM   C24
#define CONST_L3RAM     C30
#define CONST_DDR       C31

// Address for the Constant table Block Index Register 0(CTBIR_0)
#define CTBIR_0         0x22020
// Address for the Constant table Block Index Register 1(CTBIR_1)
#define CTBIR_1         0x22024

// Address for the Constant table Programmable Pointer Register 0(CTPPR_0)
#define CTPPR_0         0x22028
// Address for the Constant table Programmable Pointer Register 1(CTPPR_1)
#define CTPPR_1         0x2202C


// do nothing for one cycle
.macro NOOP
    AND		r0, r0, r0
.endm

.macro  LD32
.mparam dst,src
    LBBO    dst,src,#0x00,4
.endm

.macro  LD16
.mparam dst,src
    LBBO    dst,src,#0x00,2
.endm

.macro  LD8
.mparam dst,src
    LBBO    dst,src,#0x00,1
.endm

.macro ST32
.mparam src,dst
    SBBO    src,dst,#0x00,4
.endm

.macro ST16
.mparam src,dst
    SBBO    src,dst,#0x00,2
.endm

.macro ST8
.mparam src,dst
    SBBO    src,dst,#0x00,1
.endm

#define GER_OFFSET        0x10
#define HIESR_OFFSET      0x34
#define SICR_OFFSET       0x24
#define EISR_OFFSET       0x28

#define INTC_CHNMAP_REGS_OFFSET       0x0400
#define INTC_HOSTMAP_REGS_OFFSET      0x0800
#define INTC_HOSTINTPRIO_REGS_OFFSET  0x0900
#define INTC_SYS_INT_REGS_OFFSET      0x0D00
#define INTC_HOSTNEST_REGS_OFFSET     0x1100


#define  DSP_FLAG_ADDR 0x00000000 		// PRU0 DRAM

#define         PT_MASK                 0x1F
